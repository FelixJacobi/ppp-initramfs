#!/bin/sh

PREREQ=""

prereqs() {
	echo "$PREREQ"
}

case "$1" in
	prereqs)
		prereqs
		exit 0
	;;
esac

. /scripts/functions
EXE="$(readlink -f /usr/sbin/pppd)" && [ -f "$EXE" ] || exit 1

IFDOWN="*"
PPPD_SHUTDOWN_TIMEOUT=60
if [ -e /etc/ppp-initramfs/config ]; then
    . /etc/ppp-initramfs/config
fi

wait_for_pppd() {
    local pid pids exe timer="$PPPD_SHUTDOWN_TIMEOUT"
    pids="$(ps aux | grep /usr/sbin/pppd | awk '{ print $1 }')" || return 1

    while [ $timer -gt 0 ]; do
      for pid in $pids; do
      	# when configure_networking() is run asynchronously dropbear might
      	# not have started yet; ipconfig doesn't react to SIGTERM so we wait
      	# for the network stack to be configured (and dropbear to start)
      	# rather than terminating the shell and its children
      	if exe="$(readlink -f "/proc/$pid/exe" 2>/dev/null)"; then
      	  if [ "$exe" = "$EXE" -o "$exe" = "$EXE (deleted)" ] && [ "$(tr "\0" " " < "/proc/$pid/cmdline")" = "/usr/sbin/pppd call $PPPD_PEER " ]; then
            echo "$pid"
            return 0
      	  fi
      	fi
      	sleep 1
      	timer=$(( timer - 1 ))
      done
    done
    return 1
}

if PID="$(wait_for_pppd)"; then
    log_begin_msg "Stopping pppd"

    # Kill all process groups the leader of which is a child of the
    # pppd process, i.e., SSH sessions and their sub processes
    # (busybox's kill doesn't accept multiple -PGID so we use a while loop)
    sed -nr "s/^([0-9]+) \\(.*\\) \\S $PID \\1 .*/\\1/p" \
        /proc/[0-9]*/stat 2>/dev/null | \
        while read pgid; do kill -TERM -"$pgid"; done

    # Kill remaining children (there shouldn't be any)
    sed -nr "s/^([0-9]+) \\(.*\\) \\S $PID [0-9]+ .*/\\1/p" \
        /proc/[0-9]*/stat 2>/dev/null | \
        while read pid; do kill -TERM "$pid"; done

    # NOTE: It's racy to kill pppd after its children, as a new SSH
    # session could have been created in between.  However we don't care
    # about malicious race exploits (an attacker with a root shell could
    # just kill this script), so deleting root's authorized_keys(5) file
    # beforehand to forbid new SSH sessions should be good enough.

    kill -TERM "$PID"
    log_end_msg
fi


if [ "$BOOT" != nfs ] && [ "$IFDOWN" != none ]; then
    for IFACE in /sys/class/net/$IFDOWN; do
        [ -e "$IFACE" ] || continue
        IFACE="${IFACE#/sys/class/net/}"
        log_begin_msg "Bringing down $IFACE"
        ip link    set   dev "$IFACE" down
        ip address flush dev "$IFACE"
        ip route   flush dev "$IFACE"
        log_end_msg
    done
fi
